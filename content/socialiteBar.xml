<?xml version="1.0"?>
<!DOCTYPE window [
  <!ENTITY % notificationDTD SYSTEM "chrome://global/locale/notification.dtd">
  %notificationDTD;
  <!ENTITY % socialiteDTD SYSTEM "chrome://socialite/locale/socialite.dtd">
  %socialiteDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  
  <binding id="socialite-notification" extends="chrome://global/content/bindings/notification.xml#notification">
    <content>
      <xul:hbox class="notification-inner outset" flex="1" xbl:inherits="type">
        <xul:hbox anonid="details" align="center" flex="1"
                  oncommand="this.parentNode.parentNode._doButtonCommand(event);">
          <xul:image anonid="messageImage" class="messageImage" xbl:inherits="src=image"/>
          <xul:description anonid="messageText" class="messageText" flex="1" xbl:inherits="xbl:text=label"/>
          <xul:spacer flex="1"/>
          <children/>
        </xul:hbox>
        <xul:toolbarbutton id="socialite-notification-close-button"
                           ondblclick="event.stopPropagation();"
                           class="messageCloseButton tabbable"
                           xbl:inherits="hidden=hideclose"
                           tooltiptext="&closeNotification.tooltip;"
                           oncommand="document.getBindingParent(this).closeClicked();"/>
      </xul:hbox>
    </content>
    
    <resources>
      <stylesheet src="chrome://global/skin/notification.css"/>
    </resources>

    <implementation>
      <method name="closeClicked">
        <body>
          <![CDATA[
            var event = document.createEvent("Events");
            event.initEvent("SocialiteNotificationClosedByUser", true, true);
            this.dispatchEvent(event);
            
            this.close();
          ]]>
        </body>
      </method>
    
      <method name="fireCloseEvent">
        <body>
          <![CDATA[
            var event = document.createEvent("Events");
            event.initEvent("SocialiteNotificationClose", true, true);
            this.dispatchEvent(event);
          ]]>
        </body>
      </method>
    
      <method name="close">
        <body>
          <![CDATA[
            // Overriden copy (because we can't call super()) from notification to add an event.  
            this.fireCloseEvent();
            
            // From notification.xml
            var control = this.control;
            if (control)
              control.removeNotification(this);
            else
              this.hidden = true;
          ]]>
        </body>
      </method>
      
      <method name="focusTextbox">
        <parameter name="textbox"/>
        <body>
          // While the notification is opening, if we focus the textbox, there will be a jarring flicker.
          // This is a helper method to provide a workaround to this problem.
          
          // XXX: This is a hack to poll until the notification is finished loading (opacity == 1 after fade-in)
          // There should really be an event to listen to here, though that might be an even uglier hack.
          let self = this;
          let tries = 5;
          function checkNotification() {
            if (self.style.opacity == "" || self.style.opacity == "1") {
              textbox.focus();
            } else if (tries > 0) {
              tries -= 1;
              setTimeout(checkNotification, 200);
            }
          }
          
          checkNotification();
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="socialite-content-bar" extends="chrome://socialite/content/socialiteBar.xml#socialite-notification">
    <content>
      <xul:hbox class="notification-inner outset" flex="1" xbl:inherits="type">
        <xul:hbox anonid="details" flex="1" align="center">
          <xul:hbox anonid="siteSelector"/>
          <xul:separator width="0px" height="18px" orient="vertical" class="socialite-separator"/>
          <xul:deck anonid="deckContent" flex="1" align="center">
            <children/>
          </xul:deck>
        </xul:hbox>
        <xul:toolbarbutton id="socialite-notification-close-button"
                           ondblclick="event.stopPropagation();"
                           class="messageCloseButton tabbable"
                           xbl:inherits="hidden=hideclose"
                           tooltiptext="&closeNotification.tooltip;"
                           oncommand="document.getBindingParent(this).closeClicked();"/>
      </xul:hbox>
    </content>
    
    <resources>
      <stylesheet src="chrome://socialite/skin/socialite.css"/>
    </resources>
    
    <implementation>
      <field name="url"/>
      
      <property name="contentCount">
        <getter>
          <![CDATA[
            return this.childNodes.length;
          ]]>
        </getter>
      </property>
            
      <constructor>
        var siteSelector = document.getAnonymousElementByAttribute(this, "anonid", "siteSelector");
        var deckContent = document.getAnonymousElementByAttribute(this, "anonid", "deckContent");
        var self = this;
        
        // Site selector change handler
        siteSelector.addEventListener("command", function(event) {
          let site = siteSelector.selectedSite;
          if (site != null) {
            let index = self.getContentIndex(siteSelector.selectedSite);
            if (index != -1) {
              deckContent.selectedIndex = index
              self.childNodes[index].refresh();
            }
          } else {
            // If the selected site is null, the selected site was likely removed.
            // We should attempt to select another site, or close if the bar is empty.
            if (self.contentCount > 0) {
              siteSelector.selectIndex(0);
            } else {
              self.close();
            }          
          }
        }, false);
        
        // XXX: Clean up children that must remove observers since XBL destructors don't work
        this.addEventListener("SocialiteNotificationClose", function() {
          Array.forEach(self.childNodes, function(siteContent) {
            siteContent.destroy();
          });
          siteSelector.destroySiteSelector();          
        }, false)
      </constructor>
      
      <method name="addSiteUI">
        <parameter name="site"/>
        <parameter name="siteContent"/>
        <body>
          <![CDATA[
            this.appendChild(siteContent);
            
            var siteSelector = document.getAnonymousElementByAttribute(this, "anonid", "siteSelector");
            siteSelector.addSite(site);
            
            if (this.contentCount == 1) {
              siteSelector.selectSite(site);
            }
          ]]>
        </body>
      </method>
      
      <method name="removeSiteUI">
        <parameter name="site"/>
        <body>
          <![CDATA[
            var index = this.getContentIndex(site);
            if (index != -1) {
              this.childNodes[index].destroy();
              this.removeChild(this.childNodes[index]);
              
              var siteSelector = document.getAnonymousElementByAttribute(this, "anonid", "siteSelector");
              siteSelector.removeSite(site);
            }
          ]]>
        </body>
      </method>
      
      <method name="hasSiteUI">
        <parameter name="site"/>
        <body>
          <![CDATA[
            return this.getContentIndex(site) != -1;
          ]]>
        </body>
      </method>
      
      <method name="getContentIndex">
        <parameter name="site"/>
        <body>
          <![CDATA[
            for (var i=0; i<this.childNodes.length; i++) {
              if (this.childNodes[i].siteID == site.siteID) {
                return i;
              }
            }
            return -1;
          ]]>
        </body>
      </method>
      
      <method name="refresh">
        <parameter name="skipEvent"/>
        <body>
          <![CDATA[
            // Refresh the top (currently displayed) content.
            let deckContent = document.getAnonymousElementByAttribute(this, "anonid", "deckContent");
            let contentBar = this.childNodes[deckContent.selectedIndex];
            
            if (skipEvent) {
              contentBar._refresh();
            } else {
              contentBar.refresh();
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="socialite-submit-bar" extends="chrome://socialite/content/socialiteBar.xml#socialite-notification">
    <content>
      <xul:hbox class="notification-inner outset" flex="1" xbl:inherits="type">
        <xul:hbox anonid="details" flex="1" align="center">
          <xul:label anonid="labelSiteSelector" value="&loadedSiteSelector.label;"/>
          <xul:hbox anonid="loadedSiteSelector"/>
          <xul:separator width="0px" height="18px" orient="vertical" class="socialite-separator"/>
          <!--
              Firefox's tabbrowser has a handler that catches Ctrl-arrow keys and cancels the default event, interfering with word-by-word keyboard navigation in textboxes.
              We'll prevent the keypress event from bubbling outside the container to this problematic handler, so individual site submit UIs don't have to worry about this.
          -->
          <xul:hbox anonid="siteSubmitUIContainer" flex="1" align="center" onkeypress="event.stopPropagation();">
            <children/>
          </xul:hbox>
        </xul:hbox>
        <xul:toolbarbutton anonid="socialite-notification-close-button"
                           ondblclick="event.stopPropagation();"
                           class="messageCloseButton tabbable"
                           xbl:inherits="hidden=hideclose"
                           tooltiptext="&closeNotification.tooltip;"
                           oncommand="document.getBindingParent(this).closeClicked();"/>
      </xul:hbox>
    </content>
    
    <resources>
      <stylesheet src="chrome://socialite/skin/socialite.css"/>
    </resources>
    
    <implementation>
      <field name="url"/>
            
      <constructor>
        this.siteSelector = document.getAnonymousElementByAttribute(this, "anonid", "loadedSiteSelector");
        var self = this;
        
        // Site selector change handler
        siteSelector.addEventListener("command", function(event) {
          // Remove existing UI
          if (self.hasChildNodes()) {
            self.removeChild(self.firstChild);
          }
          
          let site = self.siteSelector.selectedSite;
          if (site != null) {
            // Add new UI
            var siteSubmitUI = site.createBarSubmitUI(document);
            self.appendChild(siteSubmitUI);
          } else {
            // If the selected site is null, the selected site was likely removed.
            // We should attempt to select another site, or close if the bar is empty.
            if (siteSelector.siteCount > 0) {
              siteSelector.selectIndex(0);
            } else {
              self.close();
            }          
          }
        }, false);
        
        // XXX: Clean up children that must remove observers since XBL destructors don't work 
        this.addEventListener("SocialiteNotificationClose", function() {
          Array.forEach(self.childNodes, function(siteContent) {
            siteContent.destroy();
          });
          siteSelector.destroyLoadedSiteSelector();
        }, false)
      </constructor>
      
      <method name="selectSite">
        <parameter name="site"/>
        <body>
          this.siteSelector.selectSite(site);
          
          if (this.hasChildNodes()) {
            this.firstChild.focus();
          }
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="socialite-site-ui">
    <resources>
      <stylesheet src="chrome://socialite/skin/socialite-platform.css"/>
    </resources>

    <implementation>
      <field name="siteID"/>
      
      <method name="destroy">
        <body>
          // To be used by subclasses
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="socialite-site-content-ui" extends="chrome://socialite/content/socialiteBar.xml#socialite-site-ui">
    <implementation>
      <field name="refreshCallback"/>

      <method name="refresh">
        <body>
          <![CDATA[
            this._refresh.apply(this, arguments);
            this.fireRefreshEvent();
          ]]>
        </body>
      </method>
      
      <method name="_refresh">
        <body>
          <![CDATA[
            if (this.refreshCallback) {
              this.refreshCallback.apply(null, arguments);
            }
          ]]>
        </body>
      </method>
      
      <method name="fireRefreshEvent">
        <body>
          <![CDATA[
            var event = document.createEvent("Events");
            event.initEvent("SocialiteContentBarRefresh", true, true);
            this.dispatchEvent(event);
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="socialite-site-selector">
    <content>
      <xul:hbox align="center">
        <xul:image anonid="imageSite" class="messageImage"/>
        <xul:label anonid="labelSite" class="socialite-site-name text-link"/>
        <xul:toolbarbutton anonid="buttonSiteSelector" type="menu" class="socialite-toolbarbutton-compact" hidden="true">
            <xul:menupopup anonid="menuSites" position="after_end"/>
        </xul:toolbarbutton>
      </xul:hbox>
    </content>
    
    <resources>
      <stylesheet src="chrome://socialite/skin/socialite.css"/>
      <stylesheet src="chrome://socialite/skin/socialite-platform.css"/>
      <stylesheet src="chrome://global/skin/notification.css"/>
    </resources>
    
    <implementation>
      <field name="siteItems"/>
      <field name="selectedSite"/>
      <field name="preferences"/>
    
      <constructor>
        <![CDATA[
          var Socialite = Components.utils.import("resource://socialite/socialite.jsm", null).Socialite;
        
          this.preferences = Components.classes["@mozilla.org/preferences-service;1"]
              .getService(Components.interfaces.nsIPrefService)
              .getBranch("extensions.socialite.sites.");
          this.preferences.QueryInterface(Components.interfaces.nsIPrefBranch2);
          
          this.siteItems = {};
          this.menuSites = document.getAnonymousElementByAttribute(this, "anonid", "menuSites");
          
          let self = this;
          
          // Site name change observer
          this.siteNameObserver = {
            observe: function(subject, topic, data) {
              // data is of the form siteID.preference
              splitData = data.split(".");
              var siteID = splitData[0];
              var prefName = splitData[1];
              
              // Update the UI if the site name changes.
              if (prefName == "siteName") {
                let newSiteName = self.preferences.getCharPref(data);
                
                let menuItem = self.siteItems[siteID];
                if (menuItem) {
                  menuItem.updateSiteName(newSiteName);
                }
                
                if (self.selectedSite.siteID == siteID) {
                  let siteName = document.getAnonymousElementByAttribute(self, "anonid", "labelSite");
                  siteName.value = newSiteName;
                }
              }
            }
          }
          this.preferences.addObserver("", this.siteNameObserver, false);
          
          // Site menu updater
          
          this.menuSites.addEventListener("popupshowing", function(event) {
            Array.map(self.menuSites.childNodes, function(menuitem) {
              menuitem.updateSiteIcon();
            });
          }, false);
          
          // Site link click handler
          let labelSite = document.getAnonymousElementByAttribute(this, "anonid", "labelSite");
          labelSite.addEventListener("click", function(event) {
            Socialite.utils.openUILink(self.selectedSite.siteURL, event);
          }, false);
        ]]>
      </constructor>
      
      <destructor>
        this.destroySiteSelector();
      </destructor>

      <method name="destroySiteSelector">
        <body>
          <![CDATA[
            this.preferences.removeObserver("", this.siteNameObserver);
            var siteImage = document.getAnonymousElementByAttribute(this, "anonid", "imageSite");
            if (siteImage.removeFaviconWatch) { siteImage.removeFaviconWatch(); }
          ]]>
        </body>
      </method>
      
      <property name="siteCount">
        <getter>
          <![CDATA[
            return this.menuSites.childNodes.length;
          ]]>
        </getter>
      </property>
      
      <method name="addSite">
        <parameter name="site"/>
        <body>
          <![CDATA[
            let self = this;
          
            let menuItem = document.createElement("menuitem");
            menuItem.class = "menuitem-iconic";
            menuItem.updateSiteName = function(newName) {
              var domUtils = Components.utils.import("resource://socialite/utils/domUtils.jsm", null);
              menuItem.setAttribute("label", newName);
              domUtils.addSorted(menuItem, self.menuSites, function(item1, item2) {
                let label1 = item1.getAttribute("label"); 
                let label2 = item2.getAttribute("label"); 
                return label1.localeCompare(label2);
              });
            }
            menuItem.updateSiteIcon = function() {
              var faviconWatch = Components.utils.import("resource://socialite/utils/faviconWatch.jsm", null);
              menuItem.setAttribute("image", faviconWatch.getFaviconURL(site.siteURL));
            }
            
            menuItem.addEventListener("command", function(event) {
              self.selectSite(site);
              event.stopPropagation();
            }, false);
            
            menuItem.updateSiteName(site.siteName);
            this.siteItems[site.siteID] = menuItem;
            
            if (this.menuSites.childNodes.length > 1) {
              let buttonSiteSelector = document.getAnonymousElementByAttribute(this, "anonid", "buttonSiteSelector");
              buttonSiteSelector.hidden = false;
            }
          ]]>
        </body>
      </method>
      
      <method name="removeSite">
        <parameter name="site"/>
        <body>
          <![CDATA[
            this.menuSites.removeChild(this.siteItems[site.siteID]);
             delete this.siteItems[site.siteID];
            
            if (this.menuSites.childNodes.length == 1) {
              let buttonSiteSelector = document.getAnonymousElementByAttribute(this, "anonid", "buttonSiteSelector");
              buttonSiteSelector.hidden = true;
            }
            
            if (site == this.selectedSite) {
              this.selectSite(null);
            }
          ]]>
        </body>
      </method>
      
      <method name="selectSite">
        <parameter name="site"/>
        <body>
          <![CDATA[
            let siteImage = document.getAnonymousElementByAttribute(this, "anonid", "imageSite");
            let siteName = document.getAnonymousElementByAttribute(this, "anonid", "labelSite");
            if (site != this.selectedSite) {
              if (site != null) {
                siteName.value = site.siteName;
                
                var faviconWatch = Components.utils.import("resource://socialite/utils/faviconWatch.jsm", null);
                if (siteImage.removeFaviconWatch) { siteImage.removeFaviconWatch(); }
                siteImage.removeFaviconWatch = faviconWatch.useFaviconAsAttribute(siteImage, "src", site.siteURL);
              } else {
                siteName.value = "";
                siteImage.setAttribute("src", "");
              }
              
              this.selectedSite = site;
              
              // Fire event
              var event = document.createEvent("UIEvent");
              event.initUIEvent("command", true, true, window, site ? site.siteID : null);
              this.dispatchEvent(event);
            }
          ]]>
        </body>
      </method>
      
      <method name="selectIndex">
        <parameter name="index"/>
        <body>
          <![CDATA[
            if (index >= 0 && index < this.menuSites.childNodes.length) {
              this.menuSites.childNodes[index].doCommand();
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="socialite-loaded-site-selector" extends="chrome://socialite/content/socialiteBar.xml#socialite-site-selector">
    <implementation>    
      <constructor>
        var Socialite = Components.utils.import("resource://socialite/socialite.jsm", null).Socialite;
        
        // Add currently loaded sites
        for (let [siteID, site] in Socialite.sites) {
          this.addSite(site);
        }

        let observerService = Components.classes["@mozilla.org/observer-service;1"]
                              .getService(Components.interfaces.nsIObserverService);

        // Site name change observer
        let self = this;
        this.loadedSiteObserver = {
          observe: function(subject, topic, data) {
            if (topic == "socialite-load-site") {
              self.addSite(Socialite.sites.byID[data]);
            } else if (topic == "socialite-unload-site") {
              self.removeSite(Socialite.sites.byID[data]);
            }
          }
        }
        observerService.addObserver(this.loadedSiteObserver, "socialite-load-site", false);
        observerService.addObserver(this.loadedSiteObserver, "socialite-unload-site", false);
      </constructor>
      
      <destructor>
        this.destroyLoadedSiteSelector();
      </destructor>

      <method name="destroyLoadedSiteSelector">
        <body>
          <![CDATA[
            let observerService = Components.classes["@mozilla.org/observer-service;1"]
                                  .getService(Components.interfaces.nsIObserverService);
            observerService.removeObserver(this.loadedSiteObserver, "socialite-load-site");
            observerService.removeObserver(this.loadedSiteObserver, "socialite-unload-site");
            
            this.destroySiteSelector();
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
  
</bindings>
