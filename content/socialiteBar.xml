<?xml version="1.0"?>
<!DOCTYPE window [
  <!ENTITY % notificationDTD SYSTEM "chrome://global/locale/notification.dtd">
  %notificationDTD;
  <!ENTITY % socialiteDTD SYSTEM "chrome://socialite/locale/socialite.dtd">
  %socialiteDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  
  <binding id="socialite-content-bar" extends="chrome://global/content/bindings/notification.xml#notification">
    <content>
      <xul:hbox class="notification-inner outset" flex="1" xbl:inherits="type">
        <xul:hbox anonid="details" flex="1" align="center">
          <xul:hbox anonid="siteSelector"/>
          <xul:separator width="0px" height="18px" orient="vertical" class="socialite-separator"/>
          <xul:deck anonid="deckContent" flex="1" align="center">
            <children/>
          </xul:deck>
        </xul:hbox>
        <xul:toolbarbutton ondblclick="event.stopPropagation();"
          class="messageCloseButton tabbable" xbl:inherits="hidden=hideclose"
          tooltiptext="&closeNotification.tooltip;" oncommand="document.getBindingParent(this).close();"/>
      </xul:hbox>
    </content>
    
    <resources>
      <stylesheet src="chrome://socialite/skin/socialite.css"/>
    </resources>
    
    <implementation>
      <field name="url"/>
            
      <constructor>
        var siteSelector = document.getAnonymousElementByAttribute(this, "anonid", "siteSelector");
        var deckContent = document.getAnonymousElementByAttribute(this, "anonid", "deckContent");
        var self = this;
        siteSelector.addEventListener("command", function(event) {
          var index = self.getContentIndex(siteSelector.selectedSite);
          if (index != -1) {
            deckContent.selectedIndex = index
            self.childNodes[index].refresh();
          }
        }, false);
      </constructor>
      
      <property name="contentCount">
        <getter>
          <![CDATA[
            return this.childNodes.length;
          ]]>
        </getter>
      </property>
      
      <method name="addSiteUI">
        <parameter name="site"/>
        <parameter name="siteContent"/>
        <body>
          <![CDATA[
            this.appendChild(siteContent);
            
            var siteSelector = document.getAnonymousElementByAttribute(this, "anonid", "siteSelector");
            siteSelector.addSite(site);
          ]]>
        </body>
      </method>
      
      <method name="removeSiteUI">
        <parameter name="site"/>
        <body>
          <![CDATA[
            var index = this.getContentIndex(site);
            if (index != -1) {
              this.removeChild(this.childNodes[index]);
              
              var siteSelector = document.getAnonymousElementByAttribute(this, "anonid", "siteSelector");
              siteSelector.removeSite(site);
            }
          ]]>
        </body>
      </method>
      
      <method name="hasSiteUI">
        <parameter name="site"/>
        <body>
          <![CDATA[
            return this.getContentIndex(site) != -1;
          ]]>
        </body>
      </method>
      
      <method name="getContentIndex">
        <parameter name="site"/>
        <body>
          <![CDATA[
            for (var i=0; i<this.childNodes.length; i++) {
              if (this.childNodes[i].siteID == site.siteID) {
                return i;
              }
            }
            return -1;
          ]]>
        </body>
      </method>
      
      <method name="refresh">
        <body>
          <![CDATA[
            // Refresh the top (currently displayed) content.
            var deckContent = document.getAnonymousElementByAttribute(this, "anonid", "deckContent");
            this.childNodes[deckContent.selectedIndex].refresh();
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="socialite-submit-bar" extends="chrome://global/content/bindings/notification.xml#notification">
    <content>
      <xul:hbox class="notification-inner outset" flex="1" xbl:inherits="type">
        <xul:hbox anonid="details" flex="1" align="center">
          <xul:label anonid="labelSiteSelector" value="&loadedSiteSelector.label;"/>
          <xul:hbox anonid="loadedSiteSelector"/>
          <xul:separator width="0px" height="18px" orient="vertical" class="socialite-separator"/>
          <xul:hbox anonid="siteSubmitUIContainer" flex="1" align="center">
            <children/>
          </xul:hbox>
        </xul:hbox>
        <xul:toolbarbutton ondblclick="event.stopPropagation();"
          class="messageCloseButton tabbable" xbl:inherits="hidden=hideclose"
          tooltiptext="&closeNotification.tooltip;" oncommand="document.getBindingParent(this).close();"/>
      </xul:hbox>
    </content>
    
    <resources>
      <stylesheet src="chrome://socialite/skin/socialite.css"/>
    </resources>
    
    <implementation>
      <field name="url"/>
            
      <constructor>
        this.siteSelector = document.getAnonymousElementByAttribute(this, "anonid", "loadedSiteSelector");
        var self = this;
        siteSelector.addEventListener("command", function(event) {
          // Remove existing UI
          if (self.hasChildNodes()){
            self.removeChild(self.firstChild);
          }
          
          // Add new UI
          var siteSubmitUI = self.siteSelector.selectedSite.createBarSubmitUI(document);
          self.appendChild(siteSubmitUI);
        }, false);
      </constructor>
    </implementation>
  </binding>
  
    <binding id="socialite-site-ui">
    <content>
    </content>
    
    <implementation>
      <field name="siteID"/>
      <field name="sitePreferences"/>
      
      <constructor>
        this.sitePreferences = Components.classes["@mozilla.org/preferences-service;1"]
            .getService(Components.interfaces.nsIPrefService)
            .getBranch("extensions.socialite.sites."+this.siteID+".");
        this.sitePreferences.QueryInterface(Components.interfaces.nsIPrefBranch2);
      </constructor>
    </implementation>
  </binding>
  
  <binding id="socialite-site-content-ui" extends="chrome://socialite/content/socialiteBar.xml#socialite-site-ui">
    <content>
    </content>
    
    <implementation>
      <field name="linkInfo"/>
      <field name="siteID"/>
      <field name="sitePreferences"/>
      <field name="refreshCallback"/>
      
      <constructor>
        this.sitePreferences = Components.classes["@mozilla.org/preferences-service;1"]
            .getService(Components.interfaces.nsIPrefService)
            .getBranch("extensions.socialite.sites."+this.siteID+".");
        this.sitePreferences.QueryInterface(Components.interfaces.nsIPrefBranch2);
      </constructor>

      <method name="refresh">
        <body>
          <![CDATA[
            if (this.refreshCallback) {
              this.refreshCallback();
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="socialite-site-selector">
    <content>
      <xul:hbox align="center">
        <xul:image anonid="imageSite" class="messageImage"/>
        <xul:label anonid="labelSite" class="socialite-site-name text-link"/>
        <xul:toolbarbutton anonid="buttonSiteSelector" type="menu" class="socialite-toolbarbutton-compact" hidden="true">
            <xul:menupopup anonid="menuSites" position="after_end"/>
        </xul:toolbarbutton>
      </xul:hbox>
    </content>
    
    <resources>
      <stylesheet src="chrome://socialite/skin/socialite.css"/>
      <stylesheet src="chrome://global/skin/notification.css"/>
    </resources>
    
    <implementation>
      <field name="sites">{}</field>
      <field name="selectedSite"/>
      <field name="preferences"/>
    
      <constructor>
        <![CDATA[
          Components.utils.import("resource://socialite/socialite.jsm");
        
          this.preferences = Components.classes["@mozilla.org/preferences-service;1"]
              .getService(Components.interfaces.nsIPrefService)
              .getBranch("extensions.socialite.sites.");
          this.preferences.QueryInterface(Components.interfaces.nsIPrefBranch2);
          
          var self = this;
          
          // Site name change observer
          this.observer = {
            observe: function(subject, topic, data) {
              // data is of the form siteID.preference
              splitData = data.split(".");
              var siteID = splitData[0];
              var prefName = splitData[1];
              
              // Update the UI if the site name changes.
              if (prefName == "siteName") {
                var newSiteName = self.preferences.getCharPref(data);
                if (self.selectedSite.siteID == siteID) {
                  var siteName = document.getAnonymousElementByAttribute(self, "anonid", "labelSite");
                  siteName.value = newSiteName;
                }
              }
            }
          }
          this.preferences.addObserver("", this.observer, false);
          
          // Site menu updater
          var menuSites = document.getAnonymousElementByAttribute(this, "anonid", "menuSites");
          menuSites.addEventListener("popupshowing", function(event) {
            for (var i=0; i<menuSites.childNodes.length; i++) {
              var menuitem = menuSites.childNodes[i];
              menuitem.update();
            }
          }, false);
          
          // Site link click handler
          var labelSite = document.getAnonymousElementByAttribute(this, "anonid", "labelSite");
          labelSite.addEventListener("click", function(event) {
            Socialite.openUILink(self.selectedSite.siteURL);
          }, false);
        ]]>
      </constructor>
      
      <destructor>
        this.preferences.removeObserver("", this.observer);
        
        var siteImage = document.getAnonymousElementByAttribute(this, "anonid", "imageSite");
        if (siteImage.removeFaviconWatch) { siteImage.removeFaviconWatch(); }
      </destructor>
      
      <method name="addSite">
        <parameter name="site"/>
        <body>
          <![CDATA[
            faviconWatch = Components.utils.import("resource://socialite/utils/faviconWatch.jsm");
            var menuSites = document.getAnonymousElementByAttribute(this, "anonid", "menuSites");
            
            var menuItem = document.createElement("menuitem");
            menuItem.class = "menuitem-iconic";
            menuItem.update = function() {
              menuItem.setAttribute("label", site.siteName);
              menuItem.setAttribute("image", faviconWatch.getFavicon(site.siteURL));
            }
            
            var self = this;
            menuItem.addEventListener("command", function(event) {
              self.selectSite(site);
              event.stopPropagation();
            }, false);
            
            menuSites.appendChild(menuItem);
            
            if (menuSites.childNodes.length == 1) {
              this.selectSite(site);
            } else {
              var buttonSiteSelector = document.getAnonymousElementByAttribute(this, "anonid", "buttonSiteSelector");
              buttonSiteSelector.hidden = false;
            }
          ]]>
        </body>
      </method>
      
      <method name="removeSite">
        <parameter name="site"/>
        <body>
          <![CDATA[
            var menuSites = document.getAnonymousElementByAttribute(this, "anonid", "menuSites");
            menuSites.removeChild(this.menuItems[site.siteID]);
            
            if (menuSites.childNodes.length == 1) {
              var buttonSiteSelector = document.getAnonymousElementByAttribute(this, "anonid", "buttonSiteSelector");
              buttonSiteSelector.hidden = true;
            }
            
            if (this.selectedSite == site) {
              // Select the first site
              if (menuSites.hasChildNodes()) {
                menuSites.firstChild.doCommand();
              }
            }
          ]]>
        </body>
      </method>
      
      <method name="selectSite">
        <parameter name="site"/>
        <body>
          <![CDATA[
            if (site != this.selectedSite) {
              var siteImage = document.getAnonymousElementByAttribute(this, "anonid", "imageSite");
              var siteName = document.getAnonymousElementByAttribute(this, "anonid", "labelSite");
              
              siteName.value = site.siteName;
              
              faviconWatch = Components.utils.import("resource://socialite/utils/faviconWatch.jsm");
              if (siteImage.removeFaviconWatch) { siteImage.removeFaviconWatch(); }
              siteImage.removeFaviconWatch = faviconWatch.useFaviconAsAttribute(siteImage, "src", site.siteURL);
              
              this.selectedSite = site;
              
              // Fire event
              var event = document.createEvent("UIEvent");
              event.initUIEvent("command", true, true, window, site.siteID);
              this.dispatchEvent(event);
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="socialite-loaded-site-selector" extends="chrome://socialite/content/socialiteBar.xml#socialite-site-selector">
    <implementation>    
      <constructor>
        Components.utils.import("resource://socialite/socialite.jsm");
        
        // Add currently loaded sites
        for each (var site in Socialite.sites.byID) {
          if (site) {
            this.addSite(site);
          }
        }

        var observerService = Components.classes["@mozilla.org/observer-service;1"]
                              .getService(Components.interfaces.nsIObserverService);

        // Site name change observer
        var self = this;
        this.observer = {
          observe: function(subject, topic, data) {
            if (topic == "socialite-load-site") {
              self.addSite(Socialite.sites.byID[data]);
            } else if (topic == "socialite-unload-site") {
              self.removeSite(Socialite.sites.byID[data]);
            }
          }
        }
        
        observerService.addObserver(this.observer, "socialite-load-site", false);
        observerService.addObserver(this.observer, "socialite-unload-site", false);
      </constructor>
      
      <destructor>
        var observerService = Components.classes["@mozilla.org/observer-service;1"]
                              .getService(Components.interfaces.nsIObserverService);
                              
        observerService.removeObserver(this.observer, "socialite-load-site");
        observerService.removeObserver(this.observer, "socialite-unload-site");
      </destructor>
    </implementation>
  </binding>
  
</bindings>
