<?xml version="1.0"?>
<!DOCTYPE reddit SYSTEM "chrome://socialite/locale/reddit.dtd">
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="reddit-content-ui" extends="chrome://socialite/content/socialiteBar.xml#socialite-site-content-ui">
    <content>
      <xul:hbox anonid="reddit-content-ui-container" flex="1" align="center">
        <xul:box tooltip="_child">
          <!-- A parent box element seems to be necessary to make tooltips work.-->
          <xul:tooltip anonid="tooltipScore" class="reddit-score-tooltip"/>
          <xul:label anonid="labelScore" value="?" class="reddit-score"/>
        </xul:box>
        <xul:description anonid="descriptionTitle" class="socialite-title" flex="1"/>
        <xul:label anonid="labelSubreddit" class="reddit-subreddit"/>
        <xul:spacer flex="9999"/>
        <xul:hbox anonid="boxButtons" class="buttonbox" align="stretch">
          <xul:button anonid="buttonLike" class="socialite-notification-button reddit-logged-in" type="checkbox" label="&like.label;" accesskey="&like.accesskey;" autoCheck="false"/>
          <xul:button anonid="buttonDislike" class="socialite-notification-button reddit-logged-in" type="checkbox" label="&dislike.label;" accesskey="&dislike.accesskey;" autoCheck="false"/>
          <xul:button anonid="buttonComments" class="socialite-notification-button" accesskey="&comments.accesskey;">
            <xul:image anonid="imageComments" class="button-icon" src="chrome://socialite/content/reddit/comments.png" hidden="true" style="margin-right: 4px"/>
            <xul:label anonid="labelCommentsNum" class="button-text" value="?"/>
            <xul:label anonid="labelCommentsWord" class="button-text" value=" &comments-plural.label;" accesskey="&comments.accesskey;"/>
          </xul:button> 
          <xul:button anonid="buttonSave" class="socialite-notification-button reddit-logged-in" label="&save.label;" accesskey="&save.accesskey;"/>
          <xul:button anonid="buttonHide" class="socialite-notification-button reddit-logged-in" label="&hide.label;" accesskey="&hide.accesskey;"/>
          <xul:button anonid="buttonRandom" class="socialite-notification-button" label="&random.label;" accesskey="&random.accesskey;"/>
          <xul:button anonid="buttonProfile" class="socialite-notification-button reddit-logged-in" label="&profile.label;" accesskey="&profile.accesskey;"/>
          <xul:button anonid="buttonLogin" class="socialite-notification-button reddit-not-logged-in" label="&login.label;" accesskey="&login.accesskey;" image="chrome://socialite/content/reddit/login.png"/>
          <children/>
        </xul:hbox>
      </xul:hbox>
    </content>
    
    <resources>
      <stylesheet src="chrome://global/skin/button.css"/>
      <stylesheet src="chrome://socialite/skin/socialite.css"/>
      <stylesheet src="chrome://socialite/skin/socialite_platform.css"/>
      <stylesheet src="chrome://socialite/skin/reddit.css"/>
    </resources>
    
    <implementation>
      <field name="afterBound"/>
      
      <property name="isLoggedIn"
                onget="return this.getAttribute('isloggedin') == 'true';"/>
      
      <constructor>
        this.className += " reddit-content-ui";
      
        // Public members for easy access
        this.labelScore = document.getAnonymousElementByAttribute(this, "anonid", "labelScore");
        this.buttonLike = document.getAnonymousElementByAttribute(this, "anonid", "buttonLike");
        this.buttonDislike = document.getAnonymousElementByAttribute(this, "anonid", "buttonDislike");
        this.labelSubreddit = document.getAnonymousElementByAttribute(this, "anonid", "labelSubreddit");
        this.buttonComments = document.getAnonymousElementByAttribute(this, "anonid", "buttonComments");
        this.imageComments = document.getAnonymousElementByAttribute(this, "anonid", "imageComments");
        this.labelCommentsNum = document.getAnonymousElementByAttribute(this, "anonid", "labelCommentsNum");
        this.labelCommentsWord = document.getAnonymousElementByAttribute(this, "anonid", "labelCommentsWord");
        this.buttonSave = document.getAnonymousElementByAttribute(this, "anonid", "buttonSave");
        this.buttonHide = document.getAnonymousElementByAttribute(this, "anonid", "buttonHide");
        this.buttonRandom = document.getAnonymousElementByAttribute(this, "anonid", "buttonRandom");
        this.buttonProfile = document.getAnonymousElementByAttribute(this, "anonid", "buttonProfile");
        this.buttonLogin = document.getAnonymousElementByAttribute(this, "anonid", "buttonLogin");
        
        // Display preferences
        this.labelScore.hidden = !this.sitePreferences.getBoolPref("showScore");
        this.labelSubreddit.hidden = !this.sitePreferences.getBoolPref("showSubreddit");
        this.buttonComments.hidden = !this.sitePreferences.getBoolPref("showComments");
        this.buttonSave.hidden = !this.sitePreferences.getBoolPref("showSave");
        this.buttonHide.hidden = !this.sitePreferences.getBoolPref("showHide");
        this.buttonRandom.hidden = !this.sitePreferences.getBoolPref("showRandom");
        this.buttonProfile.hidden = !this.sitePreferences.getBoolPref("showProfile");
        
        this.compactDisplay = this.sitePreferences.getBoolPref("compactDisplay");
        
        // Display preference change observer
        let self = this;
        this.observer = {
          observe: function(subject, topic, data) {
            switch (data) {
              case "showScore":
                self.labelScore.hidden = !self.sitePreferences.getBoolPref("showScore");
                break;
              case "showSubreddit":
                self.labelSubreddit.hidden = !self.sitePreferences.getBoolPref("showSubreddit");
                break;
              case "showComments":
                self.buttonComments.hidden = !self.sitePreferences.getBoolPref("showComments");
                break;
              case "showSave":
                self.buttonSave.hidden = !self.sitePreferences.getBoolPref("showSave");
                break;
              case "showHide":
                self.buttonHide.hidden = !self.sitePreferences.getBoolPref("showHide");
                break;
              case "showRandom":
                self.buttonRandom.hidden = !self.sitePreferences.getBoolPref("showRandom");
                break;
              case "showProfile":
                self.buttonProfile.hidden = !self.sitePreferences.getBoolPref("showProfile");
                break;
              case "compactDisplay":
                self.compactDisplay = self.sitePreferences.getBoolPref("compactDisplay");
                self.update();
                break;
            }
          }
        }
        this.sitePreferences.addObserver("", this.observer, false);
        
        let auth = this.linkInfo.API.auth;

        // Watch the site's authentication status and change UI accordingly
        function updateLoggedIn(loggedIn) {
          self.setAttribute("isloggedin", loggedIn);
        }
        updateLoggedIn(auth.isLoggedIn());
        this._removeAuthStateWatch = auth.onStateChange.watch(updateLoggedIn);
        
        // Watch for changes in logged in username and update the button
        function updateUsername(username) {
          self.buttonProfile.setAttribute("tooltiptext", "&profile.tooltipPre; ("+username+")");
        }
        updateUsername(auth.username);
        this._removeUsernameWatch = auth.onUsernameChange.watch(updateUsername);
        
        this.update();
        this.afterBound();
      </constructor>
      
      <destructor>
        this.destroy();
      </destructor>
      
      <method name="destroy">
        <body>
          this._removeAuthStateWatch();
          this._removeUsernameWatch();
          this.sitePreferences.removeObserver("", this.observer);
        </body>
      </method>

       <method name="update">
        <body>
          // Score label
          var labelScore = document.getAnonymousElementByAttribute(this, "anonid", "labelScore");
          if (this.linkInfo.localState.score != null) {
            labelScore.value = this.linkInfo.localState.score;
          } else {
            labelScore.value = "?";
          }
          if (this.linkInfo.localState.isLiked == true) {
            labelScore.setAttribute("class", "reddit-score reddit-liked");
          } else if (this.linkInfo.localState.isLiked == false) {
            labelScore.setAttribute("class", "reddit-score reddit-disliked");
          } else {
            labelScore.setAttribute("class", "reddit-score");
          }
         
          // Title description
          var redditUtils = Components.utils.import("resource://socialite/reddit/redditUtils.jsm", null);
          var descriptionTitle = document.getAnonymousElementByAttribute(this, "anonid", "descriptionTitle");
          descriptionTitle.textContent = redditUtils.removeWebSafeEntities(this.linkInfo.localState.title);
          
          // Section label
          var labelSubreddit = document.getAnonymousElementByAttribute(this, "anonid", "labelSubreddit");
          if (this.linkInfo.localState.subreddit) {
            labelSubreddit.value = "["+this.linkInfo.localState.subreddit+"]";
          } else {
            labelSubreddit.value = "";
          }
          
          // Like button
          if (this.linkInfo.localState.isLiked == true) {
            this.buttonLike.image = "chrome://socialite/content/reddit/upmod.png";
            this.buttonLike.checked = true;
          } else {
            this.buttonLike.image = "chrome://socialite/content/reddit/upgray.png";
            this.buttonLike.checked = false;
          }
          
          // Dislike button
          if (this.linkInfo.localState.isLiked == false) {
            this.buttonDislike.image = "chrome://socialite/content/reddit/downmod.png";
            this.buttonDislike.checked = true;
          } else {
            this.buttonDislike.image = "chrome://socialite/content/reddit/downgray.png";
            this.buttonDislike.checked = false;
          }
          
          // Comments button
          this.labelCommentsNum.value = this.linkInfo.localState.commentCount;
          if (this.linkInfo.localState.commentCount == 1) {
            this.labelCommentsWord.value = " &comments-single.label;";
          } else {
            this.labelCommentsWord.value = " &comments-plural.label;";
          }
          if (this.compactDisplay) {
            this.labelCommentsWord.hidden = true;
            this.imageComments.hidden = false;
            this.buttonComments.tooltipText = this.labelCommentsNum.value + this.labelCommentsWord.value;
          } else {
            this.labelCommentsWord.hidden = false;
            this.imageComments.hidden = true;
            this.buttonComments.tooltipText = "";
          }
          
          // Helper for similar buttons to follow
          var self = this;
          function updateButton(button, image, text) {
            if (self.compactDisplay) {
              if (button._oldClassName == null) {
                button._oldClassName = button.className;
                button.className = button.className + " socialite-button-compact socialite-button-iconic";
              }
              if (text) { button.tooltipText = text; }
              if (image) { button.image = image; }
            } else {
              if (button._oldClassName != null) {
                button.className = button._oldClassName;
                button._oldClassName = null;
              }
              if (text) {
                button.label = text;
                button.tooltipText = "";
              }
              if (image) { button.image = ""; }
            }
          }
          
          // Save button
          if (this.linkInfo.localState.isSaved) {
            updateButton(this.buttonSave, "chrome://socialite/content/reddit/saved.png", "&unsave.label;");
            this.buttonSave.accesskey = "&unsave.accesskey;";
          } else {
            updateButton(this.buttonSave, "chrome://socialite/content/reddit/savedgray.png", "&save.label;");
            this.buttonSave.accesskey = "&save.accesskey;";
          }
          
          // Hide button
          if (this.linkInfo.localState.isHidden) {
            updateButton(this.buttonHide, "chrome://socialite/content/reddit/hidden.png", "&unhide.label;");
            this.buttonSave.accesskey = "&unhide.accesskey;";
          } else {
            updateButton(this.buttonHide, "chrome://socialite/content/reddit/hiddengray.png", "&hide.label;");
            this.buttonSave.accesskey = "&hide.accesskey;";
          }
          
          // Random button
          updateButton(this.buttonRandom, "chrome://socialite/content/reddit/8ball.png", "&random.label;");
          
          // Profile button
          updateButton(this.buttonProfile, "chrome://socialite/content/reddit/profile.png", null);
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="reddit-submit-ui" extends="chrome://socialite/content/socialiteBar.xml#socialite-site-ui">
    <content>
      <xul:hbox anonid="container" flex="1" align="center">
        <xul:menulist anonid="menulistSubreddit" label="&subreddit.loadingtext;" tooltiptext="&subreddit.tooltip;" sizetopopup="none" class="socialite-menulist-compact">
          <xul:menupopup anonid="menuSubreddits"/>
        </xul:menulist>
        <xul:textbox anonid="textboxTitle" emptytext="&textboxTitle.emptytext;" tooltiptext="&textboxTitle.tooltip;" spellcheck="true" flex="1"/>
        <xul:button anonid="buttonSubmit" class="socialite-notification-button" label="&submit.label;" accesskey="&submit.accesskey;"/>
        <children/>
      </xul:hbox>
    </content>
    
    <resources>
      <stylesheet src="chrome://socialite/skin/socialite.css"/>
      <stylesheet src="chrome://socialite/skin/reddit.css"/>
    </resources>
    
    <implementation>
      <field name="afterBound"/>
      
      <constructor>
        this.menulistSubreddit = document.getAnonymousElementByAttribute(this, "anonid", "menulistSubreddit");
        this.menuSubreddits = document.getAnonymousElementByAttribute(this, "anonid", "menuSubreddits");
        this.textboxTitle = document.getAnonymousElementByAttribute(this, "anonid", "textboxTitle");
        this.buttonSubmit = document.getAnonymousElementByAttribute(this, "anonid", "buttonSubmit");
        
        // Pressing the enter key submits.
        let self = this;
        this.textboxTitle.addEventListener("keypress", function(event) {
          if (event.keyCode == KeyEvent.DOM_VK_RETURN) {
            self.buttonSubmit.click()
          }
        }, false);
        
        this.afterBound();
      </constructor>
      
      <method name="focus">
        <body>
          this.parentNode.focusTextbox(this.textboxTitle);
        </body>
      </method>
    </implementation>
  </binding>
  
</bindings>
